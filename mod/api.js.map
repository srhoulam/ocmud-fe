{"version":3,"sources":["../src/api.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAGA,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AACtB,QAAI;AACA,kBAAU,GAAV,CAAc,IAAd,GADA;KAAJ,CAEE,OAAM,CAAN,EAAS;;KAAT;;AAIF,QAAI,KAAK,iBAAO,IAAP,CAAY,oBAAU,UAAV,CAAjB,CAPkB;;AAStB,QAAI,YAAY;AACZ,iBAAU,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AAC7B,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,cAAV;AACA,wBAAS,IAAT;aAFG,CAAP,CAD6B;SAAvB;AAMV,iBAAU,SAAS,OAAT,CAAiB,SAAjB,EAA4B,KAA5B,EAAmC;AACzC,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,SAAV;AACA,6BAAc,SAAd;AACA,yBAAU,KAAV;aAHG,CAAP,CADyC;SAAnC;AAOV,gBAAS,SAAS,MAAT,CAAgB,SAAhB,EAA2B,WAA3B,EAAwC;AAC7C,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,QAAV;AACA,6BAAc,SAAd;AACA,+BAAgB,WAAhB;aAHG,CAAP,CAD6C;SAAxC;AAOT,YAAK,SAAS,EAAT,CAAY,SAAZ,EAAuB;AACxB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,QAAV;AACA,6BAAc,SAAd;aAFG,CAAP,CADwB;SAAvB;AAML,cAAO,SAAS,IAAT,CAAc,KAAd,EAAqB;AACxB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,MAAV;AACA,yBAAU,KAAV;aAFG,CAAP,CADwB;SAArB;AAMP,cAAO,SAAS,IAAT,GAAgB;AACnB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,MAAV;aADG,CAAP,CADmB;SAAhB;AAKP,cAAO,SAAS,IAAT,GAAgB;AACnB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,MAAV;aADG,CAAP,CADmB;SAAhB;AAKP,cAAO,SAAS,IAAT,GAAgB;AACnB,gBAAI,SAAS,GAAG,IAAH,CAAQ,SAAR,EAAmB;AAC5B,yBAAU,MAAV;aADS,CAAT,CADe;;AAKnB,iBAAK,IAAL,CALmB;;AAOnB,mBAAO,MAAP,CAPmB;SAAhB;AASP,gBAAS,SAAS,MAAT,GAAkB;AACvB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,aAAV;aADG,CAAP,CADuB;SAAlB;AAKT,aAAM,SAAS,GAAT,CAAa,OAAb,EAAsB;AACxB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,KAAV;AACA,2BAAY,OAAZ;aAFG,CAAP,CADwB;SAAtB;AAMN,gBAAS,SAAS,MAAT,GAAkB;AACvB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,QAAV;aADG,CAAP,CADuB;SAAlB;AAKT,eAAQ,SAAS,KAAT,CAAe,IAAf,EAAqB;AACzB,mBAAO,GAAG,IAAH,CAAQ,SAAR,EAAmB;AACtB,yBAAU,OAAV;AACA,yBAAU,IAAV;aAFG,CAAP,CADyB;SAArB;KApER,CATkB;;AAqFtB,cAAU,GAAV,GAAgB,SAAhB,CArFsB;;AAuFtB,WAAO,iBAAO,SAAP,CAAiB,EAAjB,EAAqB,OAArB,EAA8B,SAA9B,CAAP,CAvFsB;CAA1B;;AA0FA,IAAI,YAAY;AACZ,UAAO,OAAP;AACA,SAAM,IAAN;CAFA;;kBAKW","file":"api.js","sourcesContent":["import socket from './socket';\nimport constants from './constants';\n\nfunction initApi(methods) {\n    try {\n        apiModule.api.quit();\n    } catch(e) {\n        //  no existing connection to terminate\n    }\n\n    let io = socket.init(constants.backendURL);\n\n    let apiObject = {\n        confirm : function confirm(code) {\n            return io.emit('command', {\n                command : 'confirmEmail',\n                'code' : code\n            });\n        },\n        connect : function connect(direction, index) {\n            return io.emit('command', {\n                command : 'connect',\n                'direction' : direction,\n                'index' : index\n            });\n        },\n        create : function create(direction, description) {\n            return io.emit('command', {\n                command : 'create',\n                'direction' : direction,\n                'description' : description\n            });\n        },\n        go : function go(direction) {\n            return io.emit('command', {\n                command : 'travel',\n                'direction' : direction\n            });\n        },\n        jump : function jump(index) {\n            return io.emit('command', {\n                command : 'jump',\n                'index' : index\n            });\n        },\n        list : function list() {\n            return io.emit('command', {\n                command : 'list'\n            });\n        },\n        look : function look() {\n            return io.emit('command', {\n                command : 'look'\n            });\n        },\n        quit : function quit() {\n            let result = io.emit('command', {\n                command : 'quit'\n            });\n\n            io = null;\n\n            return result;\n        },\n        resend : function resend() {\n            return io.emit('command', {\n                command : 'resendEmail'\n            });\n        },\n        say : function say(message) {\n            return io.emit('command', {\n                command : 'say',\n                'message' : message\n            });\n        },\n        whoami : function whoami() {\n            return io.emit('command', {\n                command : 'whoami'\n            });\n        },\n        write : function write(text) {\n            return io.emit('command', {\n                command : 'write',\n                message : text\n            });\n        }\n    };\n\n    apiModule.api = apiObject;\n\n    return socket.configure(io, methods, apiObject);\n}\n\nlet apiModule = {\n    init : initApi,\n    api : null\n};\n\nexport default apiModule;\n"]}